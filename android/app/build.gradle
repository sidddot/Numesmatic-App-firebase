apply plugin: 'com.android.application'
apply plugin: 'com.facebook.react'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'
apply from: project(':expo-modules-core').projectDir.getAbsolutePath() + "/ExpoModulesCorePlugin.gradle"

// Define project root for custom React Native configurations
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    // Uncomment and set these if needed for your project
    root = file("../")
    reactNativeDir = file("../node_modules/react-native")
    codegenDir = file("../node_modules/@react-native/codegen")
    debuggableVariants = ["liteDebug", "prodDebug"]
    nodeExecutableAndArgs = ["node"]
    bundleConfig = file("../rn-cli.config.js")
    bundleAssetName = "MyApplication.android.bundle"
    entryFile = file("../js/MyApplication.android.js")
    extraPackagerArgs = []
    hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    hermesFlags = ["-O", "-output-source-map"]
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion 34

    namespace 'com.app.numesApp'

    defaultConfig {
        applicationId 'com.app.numesApp'
        minSdkVersion 31
        targetSdkVersion 34
        versionCode 1
        versionName "1.0.0"

        buildConfigField("boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", (findProperty("reactNative.unstable_useRuntimeSchedulerAlways") ?: true).toString())
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        // Uncomment and configure for release signing
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile = file(MYAPP_RELEASE_STORE_FILE)
                storePassword = project.MYAPP_RELEASE_STORE_PASSWORD
                keyAlias = project.MYAPP_RELEASE_KEY_ALIAS
                keyPassword = project.MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        // debug {
        //     signingConfig signingConfigs.debug
        // }
        release {
            signingConfig signingConfigs.release // Update to signingConfigs.release for release builds
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // Apply static values from `gradle.properties` to the `android.packagingOptions`
    ["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
        def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",").collect { it.trim() }.findAll { it }
        if (options) {
            println "android.packagingOptions.$prop += $options ($options.size())"
            options.each { android.packagingOptions[prop] += it }
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation localGroovy()
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"
    def frescoVersion = rootProject.ext.frescoVersion

    if (isGifEnabled || isWebpEnabled) {
        implementation("com.facebook.fresco:fresco:${frescoVersion}")
        implementation("com.facebook.fresco:imagepipeline-okhttp3:${frescoVersion}")
        implementation platform('com.google.firebase:firebase-bom:33.2.0')
        implementation 'com.google.firebase:firebase-analytics'
    }

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${frescoVersion}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${frescoVersion}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${frescoVersion}")
        }
    }

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Apply native modules build configuration
apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle")
applyNativeModulesAppBuildGradle(project)